_____________________


                          CS331 - SPRING 2021
                               Final exam


                              Boris Glavic
                         _____________________




                               2021-05-09




Table of Contents
_________________


1. Instructions
2. Student Information
3. Worst-case Runtime Complexity Analysis (15 points)
.. 1. Mystery function `f' (5 points)
.. 2. Mystery function `g' (5 points)
.. 3. Mystery function `h' (5 points)
4. Stack (25 points)
5. AVL-Trees (35 points)
6. Sorting (25 points)










1 Instructions
==============


  This exam is open book and open notes. You should enter the solutions
  into this text file and upload the updated file to blackboard.


  Just in case, please also send the file via email to bglavic@iit.edu




2 Student Information
=====================


  - Fill in your name, IIT email address, and CWID


  - NAME: [Liam Tucker]
  - EMAIL ADDRESS: [ltucker2@hawk.iit.edu]
  - CWID: [A20480228]


  I hereby confirm that I have done all the work myself


  - YES [X]




3 Worst-case Runtime Complexity Analysis (15 points)
====================================================


  Determine the runtime complexity of the following functions.




3.1 Mystery function `f' (5 points)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  ,----
  | def f(l: list, r: list): # l is a python list with n items and r is a python list with m items
  |     o = []
  |     for i in range(len(l)):
  |         for j in range(len(r)):
  |             if l[i] == r[j]:
  |                 o.append(l[i])
  |     return o
  `----


  - [ ] O(log n * log m)
  - [ ] O(n^2 * m)
  - [ ] O(n^2 + m)
  - [X] O(n * m)




3.2 Mystery function `g' (5 points)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  ,----
  | def g(l: list): # l is a sorted list of integers
  |     for i in l:
  |         j = 0
  |         res = True
  |         while l[j] < i and j < len(l):
  |             if i % l[j] == 0:
  |                 res = False
  |             j += 1
  |         if res:
  |             yield i
  `----


  - [ ] O(n log n)
  - [X] O(n^2)
  - [ ] O(n)
  - [ ] O(n^3)




3.3 Mystery function `h' (5 points)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  In this function we are using a `MinHeap' data structure as discussed
  in class.


  ,----
  | def h(l,k): # l list a python list of n integers and k is an integer
  |     topk = MinHeap()
  |     for i in range(len(l)):
  |         v = l[i]
  |         if v > topk.peek():
  |             topk.insert(v)
  |         if len(topk) > k:
  |             topk.pop()
  |     res = [ x for x in topk ]
  |     return sorted(res)
  `----


  - [ ] O(n * k)
  - [X] O(n * log k + k * log k)
  - [ ] O(n^2 * log k)
  - [ ] O(n + k)




4 Stack (25 points)
===================


  Write a function that takes as input a string of parenthesis and
  determines the maximal nesting depth. Your method should check whether
  the parentheses are balanced and return `-1' if this is not the case.


  - *Hint: recall that you can use a `Stack' datastructure with methods
     `push' and `pop' to check whether a bracketed expression is
     balanced*


  Examples:


  ,----
  | >>> get_nesting_depth("()()(())")
  | 2
  | >>> get_nesting_depth("()((()))(())")
  | 3
  | >>> get_nesting_depth("()(()))(())")
  | -1
  | >>> get_nesting_depth("()(())(())")
  | 2
  | >>> get_nesting_depth("()(())((())")
  | -1
  | >>> get_nesting_depth("()")
  | 1
  | >>> get_nesting_depth("(())()")
  | 2
  | >>> get_nesting_depth("(()(()))()")
  | 3
  | >>> get_nesting_depth("(")
  | -1
  | >>> get_nesting_depth(")")
  | -1
  | >>> get_nesting_depth("((())")
  | -1
  `----


  ,----
  | def get_nesting_depth(s: str):
  |     pass # Answer in the .py file
  `----


  ,----
  | class Stack:
  |     def __init__(self):
  |         self.data = []
  |
  |     def push(self, val):
  |         self.data.append(val)
  |
  |     def pop(self):
  |         assert not self.empty()
  |         val = self.data[-1]
  |         del self.data[-1]
  |         return val
  |
  |     def peek(self):
  |         assert not self.empty()
  |         return self.data[-1]
  |
  |     def empty(self):
  |         return self.data == []
  |
  |     def __len__(self):
  |         return len(self.data)
  |
  |     def __bool__(self):
  |         return not self.empty()
  |
  |     def __repr__(self):
  |         return self.data.__repr__()
  |
  |     def __str__(self):
  |         return self.__repr__()
  `----




5 AVL-Trees (35 points)
=======================


  In this task you should extend the AVL-tree implementation shown below
  with the three methods shown below. All methods should have `O(log n)'
  worst-case runtime.


  - `t.min()' returns the smallest element in the tree (return `None' if
    the tree is empty) *[5 points]*
  - `t.max()' returns the largest element in the tree (return `None' if
    the tree is empty) *[5 points]*
  - `t.next(v)' returns the smallest element in the tree that is larger
    than `v' (return `None' if no such element exists in the tree). *[25
    points]*


  ,----
  | class AVLTree:
  |     class Node:
  |         def __init__(self, val, left=None, right=None):
  |             self.val = val
  |             self.left = left
  |             self.right = right
  |
  |         def rotate_right(self):
  |             n = self.left
  |             self.val, n.val = n.val, self.val
  |             self.left, n.left, self.right, n.right = n.left, n.right, n, self.right
  |
  |         def rotate_left(self):
  |             n = self.right
  |             self.val, n.val = n.val, self.val
  |             self.left, n.left, self.right, n.right = n, self.left, n.right, n.left
  |
  |         def __repr__(self):
  |             return str(self.val)
  |
  |         def __str__(self):
  |             return self.__repr__()
  |
  |         @staticmethod
  |         def height(n):
  |             if not n:
  |                 return 0
  |             else:
  |                 return max(1+AVLTree.Node.height(n.left), 1+AVLTree.Node.height(n.right))
  |
  |     def __init__(self):
  |         self.size = 0
  |         self.root = None
  |
  |     @staticmethod
  |     def rebalance(t):
  |         if AVLTree.Node.height(t.left) > AVLTree.Node.height(t.right):
  |             if AVLTree.Node.height(t.left.left) >= AVLTree.Node.height(t.left.right):
  |                 t.rotate_right()
  |             else:
  |                 t.left.rotate_left()
  |                 t.rotate_right()
  |         else:
  |             if AVLTree.Node.height(t.right.right) >= AVLTree.Node.height(t.right.left):
  |                 t.rotate_left()
  |             else:
  |                 t.right.rotate_right()
  |                 t.rotate_left()
  |
  |     def min(self):
  |         ########################################
  |         # BEGIN SOLUTION
  |         ########################################
  |         pass # Answer in the .py file
  |         ########################################
  |         # END SOLUTION
  |         ########################################
  |
  |     def max(self):
  |         ########################################
  |         # BEGIN SOLUTION
  |         ########################################
  |         pass # Answer in the .py file
  |         ########################################
  |         # END SOLUTION
  |         ########################################
  |
  |     def next(self,v):
  |         ########################################
  |         # BEGIN SOLUTION
  |         ########################################
  |         pass # Answer in the .py file
  |         ########################################
  |         # END SOLUTION
  |         ########################################
  |
  |     def add(self, val):
  |         assert(val not in self)
  |         def add_rec(node):
  |             if not node:
  |                 return AVLTree.Node(val)
  |             elif val < node.val:
  |                 node.left = add_rec(node.left)
  |             else:
  |                 node.right = add_rec(node.right)
  |             if abs(AVLTree.Node.height(node.left) - AVLTree.Node.height(node.right)) >= 2:
  |                 AVLTree.rebalance(node)
  |             return node
  |         self.root = add_rec(self.root)
  |         self.size += 1
  |
  |     def __delitem__(self, val):
  |         assert(val in self)
  |         def delitem_rec(node):
  |             to_fix = [node]
  |
  |             if val < node.val:
  |                 node.left = delitem_rec(node.left)
  |             elif val > node.val:
  |                 node.right = delitem_rec(node.right)
  |             else:
  |                 if not node.left and not node.right:
  |                     return None
  |                 elif node.left and not node.right:
  |                     return node.left
  |                 elif node.right and not node.left:
  |                     return node.right
  |                 else:
  |                     t = node.left
  |                     if not t.right:
  |                         node.val = t.val
  |                         node.left = t.left
  |                     else:
  |                         to_fix.append(t)
  |                         n = t
  |                         while n.right.right:
  |                             n = n.right
  |                             to_fix.append(n)
  |                         t = n.right
  |                         n.right = t.left
  |                         node.val = t.val
  |             while to_fix:
  |                 n = to_fix.pop()
  |                 if abs(AVLTree.Node.height(n.left) - AVLTree.Node.height(n.right)) >= 2:
  |                     AVLTree.rebalance(n)
  |             return node
  |
  |         self.root = delitem_rec(self.root)
  |         self.size -= 1
  |
  |     def __contains__(self, val):
  |         def contains_rec(node):
  |             if not node:
  |                 return False
  |             elif val < node.val:
  |                 return contains_rec(node.left)
  |             elif val > node.val:
  |                 return contains_rec(node.right)
  |             else:
  |                 return True
  |         return contains_rec(self.root)
  |
  |     def __len__(self):
  |         return self.size
  |
  |     def __iter__(self):
  |         def iter_rec(node):
  |             if node:
  |                 yield from iter_rec(node.left)
  |                 yield node.val
  |                 yield from iter_rec(node.right)
  |         yield from iter_rec(self.root)
  |
  |     def pprint(self, width=64):
  |         """Attempts to pretty-print this tree's contents."""
  |         height = self.height()
  |         nodes  = [(self.root, 0)]
  |         prev_level = 0
  |         repr_str = ''
  |         while nodes:
  |             n,level = nodes.pop(0)
  |             if prev_level != level:
  |                 prev_level = level
  |                 repr_str += '\n'
  |             if not n:
  |                 if level < height-1:
  |                     nodes.extend([(None, level+1), (None, level+1)])
  |                 repr_str += '{val:^{width}}'.format(val='-', width=width//2**level)
  |             elif n:
  |                 if n.left or level < height-1:
  |                     nodes.append((n.left, level+1))
  |                 if n.right or level < height-1:
  |                     nodes.append((n.right, level+1))
  |                 repr_str += '{val:^{width}}'.format(val=n.val, width=width//2**level)
  |         print(repr_str)
  |
  |     def height(self):
  |         """Returns the height of the longest branch of the tree."""
  |         def height_rec(t):
  |             if not t:
  |                 return 0
  |             else:
  |                 return max(1+height_rec(t.left), 1+height_rec(t.right))
  |         return height_rec(self.root)
  `----




6 Sorting (25 points)
=====================


  Given a list of integers, write a sorting function that uses an
  AVL-tree to sort the list. Your function needs to have a worst-case
  complexity of `O(n log n)' where `n' is the size of the input
  list. The function should return a sorted list (not the AVL-tree). Use
  the `AVLTree' class from the previous question.


  ,----
  | def sortavl(l):
  |     pass # Answer written in the .py file
  `----
